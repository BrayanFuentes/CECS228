import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import java.io.PrintWriter;
public class square
{
    public static void main(String[] args) throws FileNotFoundException
    {
        File inputFile = new File("input.txt");
        Scanner scn = new Scanner(inputFile);
        Scanner scan = new Scanner(inputFile);
        PrintWriter out = new PrintWriter("output.txt");
        int counter = 0;
        while(scn.hasNextLine())
        {
            String temp = scn.nextLine();
            counter++;
        }    
        int size = counter;
        char[][]arr = new char[size][size];
        while(scan.hasNextLine())
        {
        	for(int i = 0; scan.hasNextLine() && i < size; i++)
            {
            	arr[i] = scan.nextLine().toCharArray();
            }
        }
        int biggest_area = 0;
        int area = 0;
        int[] cords = new int[] {0,0,0,0,0,0,0,0};
        for(int row = 0; row < size; row++ )
        {
        	for(int col = 0; col < size; col++)
        	{
        		if(arr[row][col] == 'A')
        		{       			
        			for(int i = col +1; i < size; i++)
        			{
        				if(arr[row][i] == 'A')
        				{
        					int dif = i - col;
        					if(row + dif < size) 
        					{
        						if((arr[row+dif][col] == 'A' || arr[row+dif][i] == 'A'))
            					{
            						if(arr[row+dif][col]=='A')
            						{
            							area = dif * dif;
                                        if(biggest_area <= area && (arr[row+dif][col] != 'B' && arr[row+dif][i] != 'A'))
                                        {
                                        	biggest_area = area;
                                        	cords[0] = row + 1;
                                        	cords[1] = col + 1;
                                        	cords[2] = row + 1;
                                        	cords[3] = i + 1;
                                        	cords[4] = row + dif + 1;
                                        	cords[5] = col + 1;
                                        	cords[6] = row + dif + 1;
                                        	cords[7] = i + 1;
                                        }
            						}
            						else if(arr[row+dif][i]=='A'  )
            						{
            							area = dif * dif;
                                        if(biggest_area < area && (arr[row + dif ][i] != 'B'&& arr[row + dif][col] != 'A'))
                                        {
                                        	biggest_area = area;
                                        	cords[0] = row + 1;
                                        	cords[1] = col + 1;
                                        	cords[2] = row + 1;
                                        	cords[3] = i + 1;
                                        	cords[4] = row + dif + 1;
                                        	cords[5] = col + 1;
                                        	cords[6] = row + dif + 1;
                                        	cords[7] = col + 1;
                                        }
            						}
            					}
        					}        					
        					else if (row - dif >= 0)
        					{
        						if((arr[row-dif][col] == 'A' || arr[row-dif][i] == 'A'))
            					{
            						if(arr[row-dif][col] == 'A')
            						{
            							area = dif * dif;
                                        if(biggest_area < area && (arr[row-dif][col] != 'B' && arr[row - dif][i] != 'A'))
                                        {
                                        	biggest_area = area;
                                        	cords[0] = row + 1;
                                        	cords[1] = col + 1;
                                        	cords[2] = row + 1;
                                        	cords[3] = i + 1;
                                        	cords[4] = row - dif + 1;
                                        	cords[5] = col + 1;
                                        	cords[6] = row - dif + 1;
                                        	cords[7] = i + 1;
                                        }
            						}
            						else if(arr[row-dif][i] == 'A')
            						{
            							area = dif * dif;
                                        if(biggest_area < area && (arr[row -dif][i] != 'B' && arr[row -dif][col] != 'A'))
                                        {
                                        	biggest_area = area;
                                        	cords[0] = row + 1;
                                        	cords[1] = col + 1;
                                        	cords[2] = row + 1;
                                        	cords[3] = i + 1;
                                        	cords[4] = row - dif + 1;
                                        	cords[5] = col + 1;
                                        	cords[6] = row - dif + 1;
                                        	cords[7] = col + 1;
                                        }
            						}
            					}
        					}
        				}
        			}
        		}
        	}
        }                
        for(int i = 0; i < cords.length;i++)
        {
        	out.println(cords[i]);
        }
        scn.close(); 
        scan.close();
        out.close();
}
}

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.Collections;
import java.util.ArrayList;

public class PicFrogs {
	
	public static void main(String[] args) throws FileNotFoundException
	{
		File inputFile = new File("input.txt");
		Scanner scn = new Scanner(inputFile);
		PrintWriter out = new PrintWriter("output.txt");
		int frogs = 0;
		int num_of_steps = 0;
		int counter = 0;
		int swaps = 0;
		int sum = 0;
		ArrayList<Integer> nums = new ArrayList<Integer>();
		String[] str = null;
		while(scn.hasNext())
		{
			if(counter == 0 && scn.hasNextInt())
			{
				frogs = scn.nextInt();
			}
			else if(counter == 1 && scn.hasNextInt())
			{
				num_of_steps = scn.nextInt();
				int temp = num_of_steps;
				str = new String[temp];
				
			}
			else if(scn.hasNextInt())
			{
				nums.add(scn.nextInt());
			}
			else
			{
				for(int i = 0; i < str.length;i++)
				{
					str[i] = scn.next();
				}
			}
			counter++;
			
		}
		Collections.sort(nums);
		System.out.println(nums);
		System.out.println(Arrays.toString(str));
		for(int i = 0; i < str.length;i++)
		{
			if(i == str.length - 1)
			{
				continue;
			}
			else 
			{
				if(str[i].equals(str[i+1]))
				{
					continue;
				}
				else
				{
					swaps++;
				}
			}
		}
		int ascend = 1;
		int descend = 1;
		int[][] final_array = new int[frogs][];
		String[][] final_string = new String[frogs][];
		
		if(frogs == 1)
		{
			/*
			for(int a = 0; a < frogs ; a++)
			{
				
				int starting_index = (nums.size()-1) - swaps;
				int start = nums.get(starting_index);
				for(int b = 0; b < nums.size(); b++)
				{
					if(b == 0)
					{
						list.add(start);
					}
					else
					{
						if(b != nums.size()-1)
						{
							if((str[b-1].equals(str[b])))
							{
								int temp = nums.get(starting_index - descend);
								//System.out.println(temp  + " " + b );
								list.add(temp);
								descend +=1;
							}
							else
							{	
								int temp = nums.get(starting_index + ascend);
								//System.out.println(temp + " " + b);
								list.add(temp);
								ascend += 1;
							}
						}
						else
						{
							for(int items: nums )
							{
								boolean in = list.contains(items);
								if(in == false)
								{
									list.add(items);
								}			
							}
						}
			  		}
				}				
			
			}
			sum = getSum(list,str);
			assignSigns(list,str);
			*/
		}
		else
		{
			int c = 0;
			for(int i = 0; i < frogs; i++)
			{	
				int[] temp = new int [num_of_steps];
				ArrayList<Integer> a_list = new ArrayList<Integer>();
				ArrayList<Integer> b_list = new ArrayList<Integer>();
				char[] temp1 = new char[num_of_steps];
				String[] f_list = new String[num_of_steps];
				c = i * num_of_steps;
				for(int a = 0; a < num_of_steps ; a++)
				{
					String t = str[a];
					temp1[a] = t.charAt(i);
					a_list.add(nums.get(a+c));
				}
				for(int z = 0; z < temp1.length;z++)
				{
					String s = Character.toString(temp1[z]);
					f_list[z] = s;
				}
				swaps = 0;
				System.out.println();
				for(int b = 0; b < f_list.length; b++)
				{
					
					if(b == f_list.length -1)
					{
						continue;
					}
					else
					{
						if(f_list[b].equals(f_list[b+1]))
						{
							continue;	
						}
						else
						{
							swaps += 1;
						}
					}
				}
				
				int starting_index = (a_list.size()-1) - swaps;
				int start = a_list.get(starting_index);
				int increment = 1; 
				int decrement = 1; 
				int[] another  = new int[num_of_steps];
				
				for(int b = 0; b < a_list.size(); b++)
				{
					if(b == 0)
					{
						b_list.add(start);
					}
					else
					{
						if(b != a_list.size()-1)
						{
							if((f_list[b-1].equals(f_list[b])))
							{
								int temp2 = a_list.get(starting_index - decrement);
								//System.out.println(temp  + " " + b );
								b_list.add(temp2);
								decrement +=1;
							}
							else
							{	
								int temp2 = a_list.get(starting_index + increment);;
								//System.out.println(temp + " " + b);
								b_list.add(temp2); 
								increment += 1;
							}
						}
						else
						{
							for(int items: a_list )
							{
								boolean in = b_list.contains(items);
								if(in == false)
								{
									b_list.add(items);
								}			
							}
						}
			  		}
				}
				for(int w= 0; w < b_list.size(); w++)
				{
					another[w] = b_list.get(w);
				}
				getSum(another,f_list);
				final_array[i] = another;
				final_string[i] = f_list;
			}
			
			
			
			
		}
		for(int[] items : final_array)
		{
			System.out.println(Arrays.toString(items));
		}
		for(String[] items : final_string)
		{
			System.out.println(Arrays.toString(items));
		}
		
		
		scn.close();
		out.close();
	}
	public static void getSum(int[] arr , String[] signs)
	{
		int sum = 0;
		for(int i = 0; i < arr.length; i++)
		{
			
			if(i == arr.length-1)
			{
				if(signs[i].equals("+"))
				{
					sum += arr[i];
				}
				else
				{
					sum -= arr[i];
					arr[i] *= -1;
				}
			}
			else if(i == 0)
			{
				if(signs[i].equals("+"))
				{
					sum += arr[i];
				}
				else
				{
					sum -= arr[i];
					arr[i] *= -1;
				}
			}
			else
			{
				int temp_sum = sum;
				if(signs[i].equals("+"))
				{
					temp_sum += arr[i];
					if(signs[i+1].equals("+"))
					{
						temp_sum += arr[i+1];
						if(temp_sum > 0)
						{
							sum += arr[i];
						}
						else
						{
							sum-= arr[i];
							arr[i] *= -1;
						}
					}
					//if its - 
					else
					{
						temp_sum -= arr[i+1];
						if(temp_sum < 0)
						{
							sum += arr[i];
						}
						else
						{
							sum -= arr[i];
							arr[i] *= -1;
						}
					}
				}
				else
				{
					temp_sum -= arr[i];
					if(signs[i+1].equals("+"))
					{
						temp_sum += arr[i+1];
						if(temp_sum > 0)
						{
							sum -= arr[i];
							arr[i] *= -1;
						}
						else
						{
							sum += arr[i];
						}
					}
					else
					{
						temp_sum -= arr[i+1];
						if(temp_sum < 0)
						{
							sum -= arr[i];
							arr[i] *= -1;
						}
						else
						{
							sum += arr[i];
						}
					}				
				}
			}
		}
		
	}
}

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.Collections;
import java.util.ArrayList;

public class PicFrogs {
	
	public static void main(String[] args) throws FileNotFoundException
	{
		File inputFile = new File("input2.txt");
		Scanner scn = new Scanner(inputFile);
		PrintWriter out = new PrintWriter("output.txt");
		int frogs = 0;
		int num_of_steps = 0;
		int counter = 0;
		int swaps = 0;
		ArrayList<Integer> nums = new ArrayList<Integer>();
		String[] str = null;
		//get all the data required from the data and make assign them to their respective instances
		while(scn.hasNext())
		{
			if(counter == 0 && scn.hasNextInt())
			{
				frogs = scn.nextInt();
			}
			else if(counter == 1 && scn.hasNextInt())
			{
				num_of_steps = scn.nextInt();
				int temp = num_of_steps;
				str = new String[temp];	
			}
			else if(scn.hasNextInt())
			{
				nums.add(scn.nextInt());
			}
			else
			{
				for(int i = 0; i < str.length;i++)
				{
					str[i] = scn.next();
				}
			}
			counter++;			
		}
		Collections.sort(nums);
		//System.out.println(nums);
		//System.out.println(Arrays.toString(str));
		int[][] final_array = new int[frogs][];
		String[][] final_string = new String[frogs][];		
		int c = 0;
		for(int i = 0; i < frogs; i++)
		{	
			ArrayList<Integer> a_list = new ArrayList<Integer>();
			ArrayList<Integer> b_list = new ArrayList<Integer>();
			char[] temp1 = new char[num_of_steps];
			String[] f_list = new String[num_of_steps];
			c = i * num_of_steps;
			for(int a = 0; a < num_of_steps ; a++)
			{
				String t = str[a];
				temp1[a] = t.charAt(i);
				a_list.add(nums.get(a+c));
			}
			for(int z = 0; z < temp1.length;z++)
			{
				String s = Character.toString(temp1[z]);
				f_list[z] = s;
			}
			swaps = 0;
			//goes through each string and counts the swaps there are.
			for(int b = 0; b < f_list.length; b++)
			{		
				if(b == f_list.length -1)
				{
					continue;
				}
				else
				{
					if(f_list[b].equals(f_list[b+1]))
					{
						continue;	
					}
					else
					{
						swaps += 1;
					}
				}
			}

			int starting_index = (a_list.size()-1) - swaps;
			int start = a_list.get(starting_index);
			int increment = 1; 
			int decrement = 1; 
			int[] another  = new int[num_of_steps];

			for(int b = 0; b < a_list.size(); b++)
			{
				if(b == 0)
				{
					b_list.add(start);
				}
				else
				{
					if(b != a_list.size()-1)
					{
						if((f_list[b-1].equals(f_list[b])))
						{
							int temp2 = a_list.get(starting_index - decrement);
							b_list.add(temp2);
							decrement +=1;
						}
						else
						{	
							int temp2 = a_list.get(starting_index + increment);;
							b_list.add(temp2); 
							increment += 1;
						}
					}
					else
					{
						for(int items: a_list )
						{
							boolean in = b_list.contains(items);
							if(in == false)
							{
								b_list.add(items);
							}			
						}
					}
				}
			}
			for(int w= 0; w < b_list.size(); w++)
			{
				another[w] = b_list.get(w);
			}
			assignSigns(another,f_list);
			signAdjuster(another, f_list);
			System.out.println(Arrays.toString(another));
			System.out.println(Arrays.toString(f_list));
			errorChecker(another, f_list);
			finalChecker(another, f_list);
			final_array[i] = another;
			final_string[i] = f_list;
		}
		for(int[] items : final_array)
		{
			System.out.println(Arrays.toString(items));
		}
		for(String[] items : final_string)
		{
			System.out.println(Arrays.toString(items));
		}
		
		
		for(int w = 0; w < num_of_steps; w++)
		{
			out.print(final_array[0][w]);
			for(int f =1; f < frogs; f++ )
			{
				out.print(","+ final_array[f][w]);
			}
			out.println();
		}
		scn.close();
		out.close();
	}
	
	public static void assignSigns(int[] arr, String[] signs)
	{
		
		for(int i = 0; i < arr.length;i++)
		{
			if(i == 0 )
			{
				if(signs[i].equals("-"))
				{
					arr[i] *= -1;
					
				}
			}
			else
			{
				if(signs[i-1].equals(signs[i]))
				{
					
					if(arr[i-1] > 0)
					{
						arr[i] *= -1;
					}
				}
				else
				{
					if(signs[i].equals("-"))
					{
						arr[i] *= -1;
					}
				}
			}
		
		}
		
	}
	
	public static void errorChecker(int[] arr , String[] signs)
	{
		int sum = 0;
		for(int i = 0; i < arr.length; i ++)
		{
			sum += arr[i];
			if((signs[i].equals("-") && sum>0)||(sum<0 && signs[i].equals("+")))
			{
				boolean wrong = true;
				if(wrong==true)
				{
					signAdjuster(arr,signs);
				}
			}
		}
		
		
	}
	public static void signAdjuster(int [] arr,String[] signs)
	{
		int sum = 0;
		for(int i = 0; i < arr.length;i++)
		{
			sum += arr[i];
			//System.out.println("i: " + i );
			if((signs[i].equals("-") && sum>0)||(sum<0 && signs[i].equals("+")))
	    	{
				sum -= arr[i];
				arr[i] *= -1;
				sum += arr[i];
				for(int j = i+1; j < arr.length;j++)
				{
					if(j != arr.length-1)
					{
						if(signs[j-1].equals(signs[j]))
						{
							
							arr[j] *= -1;
						}
					}
					else 
					{
						continue;
					}
				}
	    	}
		}
		
	}

	public static void finalChecker(int[]arr, String[] signs)
	{
		int sum = 0;
		for(int i = 0; i < arr.length; i ++)
		{
			sum += arr[i];
			if((signs[i].equals("-") && sum>0)||(sum<0 && signs[i].equals("+")))
			{
				System.out.println("error at i: " + i);
				System.exit(0);
			}
		}
	}
		//System.out.println(sum); 
		/*
			
			
			
			
			
			//System.out.println(sum);
			
    		/*if((signs[i].equals("-") && sum>0)||(sum<0 && signs[i].equals("+")))
	    	{
    			System.exit(0);
	    	}
			*/
		
		
		//System.out.println(sum);
	
}	
